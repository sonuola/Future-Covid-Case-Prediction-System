# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ylGzYPqxPl0TKDBxZpByj2b0aQxRXF0F
"""

import numpy as np
import pandas as pd
#visualisation libraries
import matplotlib.pyplot as plt

#machine learning library
import sklearn
from sklearn.linear_model import LinearRegression

#import preprocessing methods from sklearn
from sklearn.model_selection import train_test_split

#world confirmed cases

confirmed_cases = pd.read_csv('time_series_covid19_confirmed_global.csv')

confirmed_cases.head()

cols= confirmed_cases.keys()
print(cols)

confirmed = confirmed_cases.loc[:,cols[4]:cols[-1]]
#confirmed = confirmed_cases.iloc[1:3]
confirmed

dates= confirmed.keys()
dates

world_cases=[]



for i in dates:
   confirmed_sum=confirmed[i].sum()
   #print(confirmed[i])
   
   
   world_cases.append(confirmed_sum)

print(confirmed_sum)

#changing dates into days
v=1
day_date=[]
for i in range(len(dates)):
  v=i*1
  day_date.append(v)
#day_date

#ploing the cases[confirmed,recovered,deaths] with time
plt.figure(figsize=(20,12))
plt.plot(day_date,world_cases,color='blue')
plt.show

#check each day cases

def eachday_increase(records):
  d=[]
  for i in range(len(records)):
    if i==0:
        d.append(records[0])
    else:
        d.append(records[i]-records[i-1])
  return d

world_daily_increase = eachday_increase(world_cases)
#world_daily_increase

print(type(world_cases))

world_cases = np.array(world_cases).reshape(-1,1)

print(world_cases.shape)

days= np.array(day_date).reshape(-1,1)
print(days.shape)

days_in_future= 10

future_forcast = np.array([i for i in range(len(days)+ days_in_future)]).reshape(-1,1)

adjusted_dates = future_forcast[:-10]

#future_forcast
#adjusted_dates

x_train_confirmed,x_test_confirmed,y_train_confirmed,y_test_confirmed = train_test_split(days,world_cases,test_size=0.25,shuffle=False)

from sklearn.preprocessing import PolynomialFeatures
poly =PolynomialFeatures(degree=2)
poly_x_train_confirmed= poly.fit_transform(x_train_confirmed)
poly_x_test_confirmed=poly.fit_transform(x_test_confirmed)
poly_future_forcast= poly.fit_transform(future_forcast)

model= LinearRegression()
model.fit(poly_x_train_confirmed,y_train_confirmed)

test_pred =model.predict(poly_x_test_confirmed)

predictions = model.predict(poly_future_forcast)

from sklearn.metrics import mean_squared_error,mean_absolute_error

plt.plot(y_test_confirmed,color='yellow')
plt.plot(test_pred)

# world deaths

deaths_reported=pd.read_csv('time_series_covid19_deaths_global.csv')

deaths_reported.head()

cols= deaths_reported.keys()
print(cols)

deaths = deaths_reported.loc[:,cols[4]:cols[-1]]
deaths

dates= deaths.keys()
dates

world_deaths=[]


for i in dates:
   
   deaths_sum= deaths[i].sum()

    
   
   
   world_deaths.append(deaths_sum)

print(deaths_sum)

#changing dates into days
v=1
day_date=[]
for i in range(len(dates)):
  v=i*1
  day_date.append(v)
#day_date

#ploing the cases[confirmed,recovered,deaths] with time
plt.figure(figsize=(20,12))
plt.plot(day_date,world_deaths,color='red')
plt.show

print(type(world_deaths))

world_deaths = np.array(world_deaths).reshape(-1,1)

print(world_deaths.shape)

days= np.array(day_date).reshape(-1,1)
print(days.shape)

days_in_future= 10

future_forcast_deaths = np.array([i for i in range(len(days)+ days_in_future)]).reshape(-1,1)

adjusted_dates = future_forcast_deaths[:-10]

x_train_deaths,x_test_deaths,y_train_deaths,y_test_deaths = train_test_split(days,world_deaths,test_size=0.25,shuffle=False)

from sklearn.preprocessing import PolynomialFeatures
poly =PolynomialFeatures(degree=3)
poly_x_train_deaths= poly.fit_transform(x_train_deaths)
poly_x_test_deaths=poly.fit_transform(x_test_deaths)
poly_future_forcast_deaths= poly.fit_transform(future_forcast_deaths)

model= LinearRegression()
model.fit(poly_x_train_deaths,y_train_deaths)

test_pred_deaths =model.predict(poly_x_test_deaths)

predictions_deaths = model.predict(poly_future_forcast_deaths)

plt.plot(y_test_deaths,color='red')
plt.plot(test_pred_deaths)